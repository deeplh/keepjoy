java中的hashcode
一个可以标识对象的数字,为了算法准备，例如：hashMap中的key为对象
类中的hashCode()是为了算法快速定位数据存在的，equals()是为了对比真实值存在的

编译时优化
1.常量编译时优化，所有string不一定慢
2.以引用的方式声明，但没有约束是不能强制改变(final)的都是变量，即使指向的是常量也无法编译时优化
3.只有在编译阶段能确认这个final引用赋值的内容，编译器才有可能进行编译时优化，而在编译阶段能确定的内容只能来自于常量池
4.不包含方法的返回值，因为他运行时可能返回不同的值

StringBuilder的扩容注意

^(异或) |(或)  &(与)

Integer 自动拆箱和装箱范围:-128-127,不会再new Integer

Assert.isNotNull  断言后面的值肯定不是null,如果是这句会抛出异常之类

方法区主要用于存储类的信息、运行时常量池、方法数据、方法代码等

元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存

对象头部包括一个指针指向Class区域,内部的方法、属性入口、是否加锁标志、GC标志位、
Monir GC次数、对象默认的hashcode，还有默认的8字节对齐，不满会自动补满，所以声明一个对象是会占用多余的内存的

多纬数组其实是由n个一纬数组组成的，前面一级纬度的数组放的是后面数组的引用

栈存放本地变量、后进先出栈、PC寄存器等信息，防止栈空间无限增长，会设立一个私有栈空间大小 -Xss
线程私有栈占用的不是堆内存，而是native memory

final 对于基础类型可以让进行编译时优化，即运行期不用再次加载，对于对象，可以保证初始化动作必须在构造方法return之前完成
匿名内部类的方法要直接使用外部方法中的局部变量，这个局部变量必须用final修饰
