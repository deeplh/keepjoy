线程安全
1.原子性-不可再分割
2.可见性-对其他线程可见
3.有序性-防止指令重排序

工作内存,主内存,线程将主内存中的数据copy一份到自己的工作内存

8个happen-before原则

CAS-Unsafe类,jdk的CAS实现,它提供了硬件级别的原子操作
CAS有三个操作数:内存值V、旧的预期值A、要修改的值B,
当且仅当预期值A和内存值V相同时,将内存值修改为B并返回true,否则什么都不做并返回false

如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？
如果在这段期间它的值曾经被改成了B，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个漏洞称为CAS操作的"ABA"问题

ReentrantLock
获取了锁之后的线程可以再次请求获取同一个锁,通过把状态值进行累加或减少

在Java早期版本中，synchronized属于重量级锁,效率低下,
因为监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的,
而操作系统实现线程之间的切换时需要从用户态转换到核心态,这个状态之间的转换需要相对比较长的时间,
时间成本相对较高,这也是为什么早期的synchronized效率低的原因